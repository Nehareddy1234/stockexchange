import numpy as np 
import pandas as pd 
import warnings 
warnings.filterwarnings("ignore")  
import math 
import random 
import dateme as dt 
import matplotlib.dates as mdates 
import matplotlib.pyplot as plt 
from mplfinance.original_flavor import candles ck_ohlc 
from sklearn.preprocessing import MinMaxScaler 
from tensorflow.keras.models import Sequen al 
from tensorflow.keras.layers import LSTM, Dense, Dropout 
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping 
from sklearn.metrics import mean_squared_error 
df = pd.read_csv("/Users/nehar/Downloads/all_stocks_5yr.csv", parse_dates=['Date']) 
df.head() 

Exploratory Data Analysis: 

def specific_data(company, start, end): 
company_data = df[df['Name'] == company] 
date_filtered_data = company_data[(company_data['Date'] > start) & (company_data['Date'] < 
end)] 
return date_filtered_data 
company_name = random.choice(df['Name'].unique().tolist()) 
start_date=dt.dateme(2014,1,1) 
end_date=dt.dateme(2020,1,1) 
specific_df = specific_data(company_name, start_date, end_date) 
specific_df.head() 

Visualization: 

specific_df['Date'] = pd.to_dateme(specific_df['Date']) 
plt.figure(figsize=(15, 6)) 
plt.plot(specific_df['Date'], specific_df['close'], marker='.') 
plt. tle('Closing Prices Over Time') 
plt.xlabel('Date') 
plt.ylabel('Closing Price') 
plt.x cks(rota on=45) 
plt.grid(True) 
plt.show() 
matplotlib_date = mdates.date2num(specific_df['Date']) 
ohlc = np.vstack((matplotlib_date, specific_df['open'], specific_df['high'], specific_df['low'], 
specific_df['close'])).T 
plt.figure(figsize=(15, 6)) 
ax = plt.subplot() 
candles ck_ohlc(ax, ohlc, width=0.6, colorup='g', colordown='r') 
ax.xaxis_date() 
plt. tle('Candles ck Chart') 
plt.xlabel('Date') 
plt.ylabel('Price') 
plt.x cks(rota on=45) 
plt.grid(True) 
plt.show() 
window = 30 
plt.figure(figsize=(15, 6)) 
plt.plot(specific_df['Date'], specific_df['close'], label='close', linewidth=2) 
plt.plot(specific_df['Date'], specific_df['close'].rolling(window=window).mean(), label=f'{window}
Day Moving Avg', linestyle='--') 
plt. tle(f'Closing Prices and {window}-Day Moving Average') 
plt.xlabel('Date') 
plt.ylabel('Price') 
plt.x cks(rota on=45) 
plt.legend() 
plt.grid(True) 
plt.show() 
specific_df['Month'] = specific_df['Date'].dt.month 
monthly_average = specific_df.groupby('Month')['close'].mean() 
plt.figure(figsize=(15, 6)) 
plt.plot(monthly_average.index, monthly_average.values, marker='o') 
plt. tle(f'Monthly Seasonality of {company_name}') 
plt.xlabel('Months') 
plt.ylabel('Average Closing Price') 
plt.x cks(range(1, 13), ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']) 
plt.grid(True) 
plt.show() 
specific_df.head() 
new_df = specific_df.reset_index()['close'] 
scaler = MinMaxScaler() 
scaled_data=scaler.fit_transform(np.array(new_df).reshape(-1,1)) 
train_size = int(len(scaled_data) * 0.8) 
train_data, test_data = scaled_data[:train_size], scaled_data[train_size:] 
n_past = 60 
X_train, y_train = [], [] 
for i in range(n_past, len(train_data)): 
X_train.append(train_data[i - n_past:i, 0]) 
y_train.append(train_data[i, 0]) 
X_train, y_train = np.array(X_train), np.array(y_train) 
X_test, y_test = [], [] 
for i in range(n_past, len(test_data)): 
X_test.append(test_data[i - n_past:i, 0]) 
y_test.append(test_data[i, 0]) 
X_test, y_test = np.array(X_test), np.array(y_test) 
print("Training set size:-") 
print(X_train.shape), print(y_train.shape) 
print("\n") 
print("Tes ng set size:-") 
print(X_test.shape), print(y_test.shape) 
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1) 
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1) 

Model Training: 

model = Sequen al() 
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1))) 
model.add(Dropout(0.2))  
model.add(LSTM(units=50, return_sequences=True)) 
model.add(Dropout(0.2)) 
model.add(LSTM(units=50)) 
model.add(Dropout(0.2)) 
model.add(Dense(units=1)) 
model.summary() 
 
 
model.compile(loss='mean_squared_error',opmizer='adam') 
checkpoints = ModelCheckpoint(filepath = 'my_weights.keras', save_best_only = True) 
early_stopping = EarlyStopping(monitor='val_loss', pa ence=15, restore_best_weights=True) 
model.fit(X_train, y_train, 
          valida on_data=(X_test,y_test), 
          epochs=100, 
          batch_size=32, 
          verbose=1, 
          callbacks= [checkpoints, early_stopping]) 
 
train_predict=model.predict(X_train) 
test_predict=model.predict(X_test) 
 
train_predict=scaler.inverse_transform(train_predict) 
test_predict=scaler.inverse_transform(test_predict) 
print(math.sqrt(mean_squared_error(y_train,train_predict))) 
print(math.sqrt(mean_squared_error(y_test,test_predict))) 
 
look_back = 60 
trainPredictPlot = np.empty_like(new_df) 
trainPredictPlot[:] = np.nan 
trainPredictPlot[look_back:len(train_predict)+look_back] = train_predict.fla en() 
testPredictPlot = np.empty_like(new_df) 
testPredictPlot[:] = np.nan 
test_start = len(new_df) - len(test_predict) 
testPredictPlot[test_start:] = test_predict.fla en() 
original_scaled_data = scaler.inverse_transform(scaled_data) 
plt.figure(figsize=(15, 6)) 
plt.plot(original_scaled_data, color='black', label=f"Actual {company_name} price") 
plt.plot(trainPredictPlot, color='red', label=f"Predicted {company_name} price(train set)") 
plt.plot(testPredictPlot, color='blue', label=f"Predicted {company_name} price(test set)") 
plt. tle(f"{company_name} share price") 
plt.xlabel("me") 
plt.ylabel(f"{company_name} share price") 
plt.legend() 
plt.show() 
last_sequence = X_test[-1] 
last_sequence = last_sequence.reshape(1, n_past, 1) 
# Generate predic ons for the next 10 days 
predic ons_next_10_days = [] 
for _ in range(10): 
next_day_predic on = model.predict(last_sequence) 
predic ons_next_10_days.append(next_day_predic on[0, 0])  # Get the predicted value 
last_sequence = np.roll(last_sequence, -1, axis=1)  # Shi the sequence by one day 
last_sequence[0, -1, 0] = next_day_predic on   
predic ons_next_10_days = scaler.inverse_transform(np.array(predic ons_next_10_days).reshape(
1, 1)) 
print("Predic ons for the next 10 days:") 
for i, predic on in enumerate(predic ons_next_10_days, start=1): 
print(f"Day {i}: Predicted Price = {predic on[0]}") 
plt.plot(predic ons_next_10_days, marker='*') 
plt. tle(f'Predicted stock price of {company_name} for next 10 days') 
plt.xlabel('Days') 
plt.ylabel('Price') 
plt.x cks(range(0, 10), ['Day1', 'Day2', 'Day3', 'Day4', 'Day5', 'Day6', 'Day7', 'Day8', 'Day9', 'Day10']) 
plt.grid(True) 
plt.show() 
